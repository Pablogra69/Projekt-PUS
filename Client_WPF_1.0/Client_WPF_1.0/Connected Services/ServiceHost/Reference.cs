//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_WPF_1._0.ServiceHost {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceHost.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string[] GetData(string i_Id, int i_Operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string[]> GetDataAsync(string i_Id, int i_Operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataList", ReplyAction="http://tempuri.org/IService1/GetDataListResponse")]
        System.Data.DataTable GetDataList(string s_IdLocal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataList", ReplyAction="http://tempuri.org/IService1/GetDataListResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDataListAsync(string s_IdLocal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsServerConnected", ReplyAction="http://tempuri.org/IService1/IsServerConnectedResponse")]
        bool IsServerConnected();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsServerConnected", ReplyAction="http://tempuri.org/IService1/IsServerConnectedResponse")]
        System.Threading.Tasks.Task<bool> IsServerConnectedAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/PutProduct")]
        void PutProduct(string id, string lokalizacja, bool idOrCatalog);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/PutProduct")]
        System.Threading.Tasks.Task PutProductAsync(string id, string lokalizacja, bool idOrCatalog);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/AddEmptyProduct")]
        void AddEmptyProduct(string[] list, int Open_Create);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/AddEmptyProduct")]
        System.Threading.Tasks.Task AddEmptyProductAsync(string[] list, int Open_Create);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/AddPicture")]
        void AddPicture(string[] list, int Open_Create);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/AddPicture")]
        System.Threading.Tasks.Task AddPictureAsync(string[] list, int Open_Create);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListPicture", ReplyAction="http://tempuri.org/IService1/GetListPictureResponse")]
        string[] GetListPicture();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListPicture", ReplyAction="http://tempuri.org/IService1/GetListPictureResponse")]
        System.Threading.Tasks.Task<string[]> GetListPictureAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListProductEmpty", ReplyAction="http://tempuri.org/IService1/GetListProductEmptyResponse")]
        string[] GetListProductEmpty();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListProductEmpty", ReplyAction="http://tempuri.org/IService1/GetListProductEmptyResponse")]
        System.Threading.Tasks.Task<string[]> GetListProductEmptyAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/AddOrder")]
        void AddOrder(byte[] xml, string s_FileName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/AddOrder")]
        System.Threading.Tasks.Task AddOrderAsync(byte[] xml, string s_FileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListOrders", ReplyAction="http://tempuri.org/IService1/GetListOrdersResponse")]
        string[] GetListOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListOrders", ReplyAction="http://tempuri.org/IService1/GetListOrdersResponse")]
        System.Threading.Tasks.Task<string[]> GetListOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOrder", ReplyAction="http://tempuri.org/IService1/GetOrderResponse")]
        System.Data.DataTable GetOrder(string s_FileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOrder", ReplyAction="http://tempuri.org/IService1/GetOrderResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetOrderAsync(string s_FileName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/DeleteOrder")]
        void DeleteOrder(string s_FileName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/DeleteOrder")]
        System.Threading.Tasks.Task DeleteOrderAsync(string s_FileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client_WPF_1._0.ServiceHost.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client_WPF_1._0.ServiceHost.IService1>, Client_WPF_1._0.ServiceHost.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetData(string i_Id, int i_Operation) {
            return base.Channel.GetData(i_Id, i_Operation);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDataAsync(string i_Id, int i_Operation) {
            return base.Channel.GetDataAsync(i_Id, i_Operation);
        }
        
        public System.Data.DataTable GetDataList(string s_IdLocal) {
            return base.Channel.GetDataList(s_IdLocal);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDataListAsync(string s_IdLocal) {
            return base.Channel.GetDataListAsync(s_IdLocal);
        }
        
        public bool IsServerConnected() {
            return base.Channel.IsServerConnected();
        }
        
        public System.Threading.Tasks.Task<bool> IsServerConnectedAsync() {
            return base.Channel.IsServerConnectedAsync();
        }
        
        public void PutProduct(string id, string lokalizacja, bool idOrCatalog) {
            base.Channel.PutProduct(id, lokalizacja, idOrCatalog);
        }
        
        public System.Threading.Tasks.Task PutProductAsync(string id, string lokalizacja, bool idOrCatalog) {
            return base.Channel.PutProductAsync(id, lokalizacja, idOrCatalog);
        }
        
        public void AddEmptyProduct(string[] list, int Open_Create) {
            base.Channel.AddEmptyProduct(list, Open_Create);
        }
        
        public System.Threading.Tasks.Task AddEmptyProductAsync(string[] list, int Open_Create) {
            return base.Channel.AddEmptyProductAsync(list, Open_Create);
        }
        
        public void AddPicture(string[] list, int Open_Create) {
            base.Channel.AddPicture(list, Open_Create);
        }
        
        public System.Threading.Tasks.Task AddPictureAsync(string[] list, int Open_Create) {
            return base.Channel.AddPictureAsync(list, Open_Create);
        }
        
        public string[] GetListPicture() {
            return base.Channel.GetListPicture();
        }
        
        public System.Threading.Tasks.Task<string[]> GetListPictureAsync() {
            return base.Channel.GetListPictureAsync();
        }
        
        public string[] GetListProductEmpty() {
            return base.Channel.GetListProductEmpty();
        }
        
        public System.Threading.Tasks.Task<string[]> GetListProductEmptyAsync() {
            return base.Channel.GetListProductEmptyAsync();
        }
        
        public void AddOrder(byte[] xml, string s_FileName) {
            base.Channel.AddOrder(xml, s_FileName);
        }
        
        public System.Threading.Tasks.Task AddOrderAsync(byte[] xml, string s_FileName) {
            return base.Channel.AddOrderAsync(xml, s_FileName);
        }
        
        public string[] GetListOrders() {
            return base.Channel.GetListOrders();
        }
        
        public System.Threading.Tasks.Task<string[]> GetListOrdersAsync() {
            return base.Channel.GetListOrdersAsync();
        }
        
        public System.Data.DataTable GetOrder(string s_FileName) {
            return base.Channel.GetOrder(s_FileName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetOrderAsync(string s_FileName) {
            return base.Channel.GetOrderAsync(s_FileName);
        }
        
        public void DeleteOrder(string s_FileName) {
            base.Channel.DeleteOrder(s_FileName);
        }
        
        public System.Threading.Tasks.Task DeleteOrderAsync(string s_FileName) {
            return base.Channel.DeleteOrderAsync(s_FileName);
        }
    }
}
